一、maven介绍
	1.使用需求
		-企业岗位需求
		-软件开发遇到的问题
			1.jar包的依赖与管理
				项目中的很多jar包：
				问题：不能确定jar包的完全正确性、不同技术框架间的管理、依赖
			2.自动构建项目
				- 软件开发：可行性分析、需求分析、软件设计、软件开发、发布、运维
				- 软件构建：软件已经开发完毕，需要构建成一个产品进行发布
				  构建步骤：
				  清除-->编译-->测试-->报告-->打包（jar\war）-->安装-->部署
			  maven可以通过一个命令实现自动构建软件项目
	2.引入
		1. maven介绍  
			- 它是apache旗下的一款开源工具  
			- pom（项目对象模型）（project object model）
			- 软件构建的生命周期
			清除--> 编译-->测试-->报告-->打包（jar\war）-->安装-->部署到远程

			- 介绍：  Maven是一个采用纯Java编写的开源项目管理工具,
				Maven采用了一种被称之为Project Object Model (POM)概念来管理项目，
				所有的项目配置信息都被定义在一个叫做POM.xml的文件中, 
				通过该文件Maven可以管理项目的整个生命周期，
				包括清除、编译，测试，报告、打包、部署等等。
		2.maven 解决的问题
			- jar包的声明式依赖与管理
			- 自动构建、发布项目
		3.maven、ant、svn的区别
			-maven与ant之间的区别
				都是软件的构建工具，软件管理工具，maven比ant更加强大，已经取代了ant
				- jar包声明式依赖
				- jar包仓库
			-maven与svn的区别
				1.maven是软件构建工具，是如昂及源码已经完毕，需要构建、部署、发布
				2.svn是软件版本控制工具，是协同开发空间
					svn仓库：
						1.项目源码保存
						2.历史版本的备份
						3.每次版本修改情况
				需求：maven+svn
		
二、体验maven
	1.到官网下载
	2.解压后目录结构
		bin
			存放maven 可执行命令
		boot
			存放下载jar包的引擎，通过该工具来下载jar包
			- 第三方项目依赖的jar包
			- maven本身的软件构建的生命周期插件的jar包，默认是没有集成这些插件
			清除插件 --编译插件 -- 打包插件
		conf
			存放配置文件
			配置本地仓库地址，已经服务器的校验
				<!-- 配置本地仓库路径 -->
				<localRepository>D:/apachemaven_repo/repository</localRepository>
		lib
			共享库。maven软件依赖的lib jar包
				
		查看maven版本：
			mvn -version
		
	3.创建满足Maven规约的项目
		-/src
			--/main
				---/java
				---/resources
			--/test
		-/target
		-/WebContent
			--/WEB-INF
				---lib
				---web.xml
		-pom.xml
	
	4.命令使用
		mvn
			-clean			清除
			-compile		编译
			-test			测试
			-clean			清理（清理target目录）
			-package		打包（打包到target下）
			-install		安装到本地仓库
			-deploy			部署到服务器
			
	5.思考：
		- 从什么地方下载maven命令插件或者第三方依赖jar包，并且存放在哪里
		1. 从哪里下载
			\lib\maven-model-builder-3.2.1.jar
			pom.xml文件配置
		
		<!--第三方jar包下载的地址-->
		 <repositories>
			<repository>
			  <id>central</id>
			  <name>Central Repository</name>
			  <url>http://repo.maven.apache.org/maven2</url>
			  <layout>default</layout>
			  <snapshots>
				<enabled>false</enabled>
			  </snapshots>
			</repository>
		  </repositories>
		 <!--maven的生命周期插件的下载地址-->
		  <pluginRepositories>
			<pluginRepository>
			  <id>central</id>
			  <name>Central Repository</name>
			  <url>http://repo.maven.apache.org/maven2</url>
			  <layout>default</layout>
			  <snapshots>
				<enabled>false</enabled>
			  </snapshots>
			  <releases>
				<updatePolicy>never</updatePolicy>
			  </releases>
			</pluginRepository>
		  </pluginRepositories>

			
搭建maven的私服
	1.nexus介绍，是一个属于sonatype机构的开源的框架，用该框架架设maven私有服务器
	2.nexus私服环境搭建
		下载
		把nexus.war包放在tomcat的人webapp下
		浏览登录
			admin	admin123
	3.nexus 仓库的分类
		-hosted		宿主仓库，该仓库属于该公司私有
			1.3rd part	第三方的jar包，但是该jar包没有在中心仓库保存
			2.snapshot	测试版本、镜像版本
			3.release	发行版本
			4.Mixed	综合的，既有测试也有发行
		-proxy		代理仓库:代理中心仓库的jar包
			
		-group		仓库组：虚拟的概念
		可以包含其他的一些仓库
		（通常就引用这个，这里面先在hosted宿主仓库找，找不到在到中心仓库代理中去找）
		
		

	4.通过私服上传下载jar包
		上传
			3.0版本后不能从页面上传
			
			将应用发布到私服
			<!-- 分销管理，把jar包发布到私服 -->
			<distributionManagement>
				<!-- 发布到快照版本的仓库，即测试版本仓库 -->
				<snapshotRepository>
					<id>LR-Snapshot</id><!-- 配置放到那个仓库 -->
					<url>http://localhost:8081/repository/LR-Snapshot/</url><!--对应的仓库地址 -->
				</snapshotRepository>
				<!-- 发布到发行版本的仓库，也可以发布到3rd party仓库 -->
				<repository>
					<id>LR-release</id><!-- 配置放到那个仓库 -->
					<url>http://localhost:8081/repository/LR-release/</url><!-- 对应的仓库地址 -->
				</repository>
			</distributionManagement>
		下载
	
	
			